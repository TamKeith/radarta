<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd http://www.springframework.org/schema/data/jpa https://www.springframework.org/schema/data/jpa/spring-jpa.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">

    <description>Jpa Configuration</description>


    <context:annotation-config/><!-- I want to configure the rest of my application using annotations -->
    <context:component-scan base-package="com.tamsanqakn.radarta"/><!-- scan here for the various annotations -->

    <!-- Adding Spring-Data-Jpa -->
    <jpa:repositories base-package="com.tamsanqakn.radarta.repository"/><!-- Tell Spring to configure the Jpa Repositories -->

    <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"/><!-- tells spring to use the persistence context annotation -->

    <!-- Entity Manager Factory: is what we use to start up jpa and hibernate inside our application -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="persistenceUnitName" value="punit"/>
        <property name="dataSource" ref="dataSource"/>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="showSql" value="true"/> <!-- this will show the sql we are executing behind the scenes as we are running hibernate (useful in debugging) -->
            </bean>
        </property>
        <property name="jpaPropertyMap"><!-- this is where we define specific jpa vendor properties, in this case these are the ones specific to Hibernate. -->
            <map>
                <entry key="hibernate.dialect" value="org.hibernate.dialect.MySQL5InnoDBDialect"/>
                <entry key="hibernate.hbm2ddl.auto" value="create"/> <!-- specifies what to do with our database schema: create, create-drop, update, validate, none -->
                <entry key="hibernate.format_sql" value="true"/>
            </map>
        </property>
    </bean>

    <!-- Making the transactions available for us!!! -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/> <!-- this entityManagerFactory is used to wrap transactions around -->
    </bean>
    <!-- Configure Transactions using annotations -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- DataSource: Use JNDI lookups in production -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/fitnessTracker?autoReconnect=true"/>
        <property name="username" value="root"/>
        <property name="password" value=""/>
    </bean>


</beans>
